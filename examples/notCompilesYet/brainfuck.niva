union Op =
| Inc, Move -> val: int
| Loop -> loop: {Op} // list of Op
| Print

type Tape tape: {int} pos: int
construct Tape new = Tape tape: {} pos: 0

Tape get = tape at: pos
Tape inc: x::int  = (tape at: pos) + x
Tape move: x::int = [
  pos add: x
  (pos >= tape size) whileTrue: [
    tape = Array copyFrom: tape ofSize: tape size * 2
  ]
]

type Printer sum1: int sum2: int quiet: bool
construct Printer quiet: bool = Printer sum1: 0 sum2: 0

Printer print: n::int =
  quiet
  | true -> self sum1: sum1 + n % 255
  | false -> self sum2: sum1 + sum2 % 255
  |=> n toChar echo

Printer getChecksum = (sum2 shl: 8) or: sum1

type Program code: string printer: Printer ops: {Op}

Program parse: iter::CharIterator -> {Op} = [
  res::{Op} = {}
  iter hasNext while: [
    it next
    | '+' -> res add: Inc val: 1
    | '-' -> res add: Inc val: -1
    | '>' -> res add: Move val: 1
    | '<' -> res add: Move val: -1
    | '.' -> res add: Print
    | '[' -> res add: Loop val: it parse
    | ']' -> ^res toTypedArray
  ]
  ^res toTypedArray
]

Program run = self runProgram: ops onTape: Tape new

Program runProgram: program::{Op} onTape: tape::Tape = [
  program foreach: [
    it
    | Inc -> tape inc: it val
    | Move -> tape move: it val
    | Loop -> (tape get > 0) while: [ self runProgram: it loop onTape: tape ]
    | Print -> printer print: tape get
  ]
]

construct Program new = [
  self ops: code iterator parse
]


type Main
Main verify = [
  code = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>" +
         "---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++."
  pLeft = Printer quiet: true
  program = Program code: code printer: pLeft
  program run
  left = pLeft getChecksum

  pRight = Printer quiet: true
  "Hello World!\n" foreach: [
    pRight print: it
  ]
  right = pRight getChecksum
  | left != right -> System err: "$left != $right"
]

Main verify
code = File fromPath: "/tmp/brainfuckProgram"
p = Printer quiet: (System getEnv: "QUIET") isNullOrEmpty
startTime = System currentTimeInMillis
(Program code: code printer: p) run
timeDiff = System currentTimeInMillis - startTime / 1e3

| p quiet -> "Output checksum: ${p getChecksum}" echo
"time: $timeDiff" echo
