//type Assert
//constructor Assert that::Any equals::Any -> Unit = [
//  that != equals => [
//    Error throwWithMessage: "Assertion failed: $that != $equals"
//  ]
//]
//Assert that: "sas" equals: "sas"

//fun <T> Node<T>.addAll(): Int {
//    val v = this.value
//    val l = left
//    val r = right
//    when (v) {
//        is Int -> {
//            val leftSum = left.unpackOr({it.addAll()}, 0)
//            val rightSum = if (r != null) r.addAll() else 0
//            return v + leftSum + rightSum
//        }
//        else -> return 0
//    }
//
//}




//type Person name: String
//Person func::Person.[Int, String -> Int] = 1 //func this: this x: 1 y: "Sas"
////Person func::Person.[Int, String -> Int] =  this func x: 1 y: "Sas"
////Person func::Person.[Int, String -> Int] =  this Int: 1 String: "Sas"
////Person func::Person.[x::Int, y::String -> Int] = this x: 1 y: "Sas"
//
//func = [this::Person, x::Int, y::String -> x inc inc inc]
//func = Person[x::Int, y::String -> x inc inc inc]
//
//x = Person name: "Alice"
//x func: func


//> 6
>{1 2 3} reduce: [a, b -> a + b]





//T d -> T = [
//  receiver = Compiler getName: 0
//  "$receiver = $this" echo
//  ^ this
//]


//>{1 2 3 4 5 6}
//    map: [it + 1] |>
//    filter: [it % 2 == 0] |>
//    map: [it toString + "!!!"] |>
//    echo






