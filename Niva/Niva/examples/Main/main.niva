

// acc <- i == 0 => acc - it v |=> acc + it v

// simple builder with childrens

//union Node =
//| Sub nodes: MutableList::Node
//| Add nodes: MutableList::Node
//| Value v: Int
//
//Add walkAdd: init::Int -> Int = [
//    // no fold variant
//    mut acc = init
//    nodes forEach: [
//        | it
//        | Value => acc <- acc + it v
//        | Add => acc <- acc + (it walkAdd: acc)
//        | Sub => acc <- acc + (it walkSub: acc)
//    ]
//
//    ^ acc
//]
//
//Sub walkSub: init::Int -> Int = [
//    // no fold variant
//    mut acc = init
//    nodes forEachIndexed: [ i, it ->
//        | it
//        | Value => acc <- i == 0
//                            ifTrue: [acc + it v]
//                            ifFalse: [acc - it v]
//        | Add =>   acc <- acc - (it walkAdd: acc)
//        | Sub =>   acc <- acc - (it walkSub: acc)
//    ]
//
//    ^ acc
//]
//
//Node walk: init::Int -> Int = [
//
//    x = | this
//    | Add => this walkAdd: init
//    | Sub => this walkSub: init
//    | Value => v
//    x echo
//    ^ x
//]
//
//
//type NodeList
//    list: MutableList::Node
//
//builder NodeList node -> Int = [
//    n = NodeList list: {}
//
//    build this: n
//
//    result = n list map: [it walk: 0]
//
////> [20, 30]
//    > result
//
//    ^ result inject: 0 into: [a, b -> a + b]
//]
//
//
//
//NodeList builder add = [
//    addNode = Add nodes: {}
//    defaultAction = [ x::Int->
//        addNode nodes add: (Value v: x)
//    ]
//
//    build this: this defaultAction: defaultAction
//
//    this list add: addNode
//
//]
//
//NodeList builder sub = [
//    subNode = Sub nodes: {}
//    defaultAction = [ x::Int->
//        subNode nodes add: (Value v: x)
//    ]
//
//    build this: this defaultAction: defaultAction
//
//    this list add: subNode
//
//]
//
//node [
//    .add [
//        10
//        20
//        .sub [
//            40
//            20
//        ]
//    ]
//] echo


// HTML


//union Tag =
//| Head
//| Title
//
//union HTML content: String =
//| ^Tag
//
//
//
//// title
//builder Title title -> Title = [
//    strBuilder = StringBuilder new
//
//    defaultAction = [ x::String->
//        strBuilder appendLine: x
//    ]
//
//    build this: x defaultAction: defaultAction
//
//    ^ x
//]
//
//// result DSL
//
//html [
//    head [
//        title [ "XML" ]
//    ]
//]


//

//builder StringBuilder buildStr -> String = [
//    // 1 create main object
//    b = StringBuilder new
//
//    // 2 define default action that will be called with every type of first argument
//    defaultAction = [ default::Any ->
//        b append: default; append: "\n"
//    ]
//
//    // 3 run the body of the builder (defaultAction is optional)
//    // every builder has `build` codeblock implicitly
//    build this: b defaultAction: defaultAction
//
//    // 4 return result of the builder
//    ^ b toString
//]
//
//buildStr [
//    123
//    "abc"
//    "hello"
//] echo


//builder StringBuilder buildStr -> String = [
//    b = StringBuilder new
//
//    defaultAction = [ default::Any->
//        b appendLine: default
//    ]
//
//
//    build this: b defaultAction: defaultAction
//
//    ^ this toString
//]
//
//x = buildStr [
//    .appendLine: "ast"
//    .appendLine: buildStr ["kek"]
//
//    123
//]
//x echo

// .........


//builder Int buildStr -> Int = [
//    mut x = 0
//    defaultAction = [ default::Any->
//        | default
//        | Int => x <- x + default
//        | String => x <- x + default toInt
//        |=> []
//    ]
//
//    build this: x defaultAction: defaultAction
//
//    ^ x
//]
//
//x = buildStr [
//    123
//    "123"
//]

1 echo

