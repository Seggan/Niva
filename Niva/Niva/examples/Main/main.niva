Int min::Int = this > min => min |=> this

20 min: 1 |> min: 0 |> echo

1..<10 filter: [it % 2 == 0] |> forEach: [it echo]


Int unary = this + 7

7 unary |>
  unary |>
  unary |>
  unary |>
  unary |> echo



//
//Int then1::Int = this + then1
//Int then2::Int = this + then2
//Int then3::Int = this + then3
//1 then1: 1 |> - 10 |> then2: 2 |> unary |> then3: 3 |> echo

//(25 min: 1) echo

//(1..<10 filter: [it % 2 == 0]) forEach: [it echo]




//// 1 type declaration
//type Person name: String age: Int
//
//// 2 tagged union declaration
//union User =
//| LoggedIn name: String
//| Guest
//
//// 3 hello world
//"Hello World!" echo
//
//// 4 creating instance of type
//person = Person name: "sas" age: 6
//
//// 5 call function
//person haveBirthday
//
//// 7 create function for type
//// 6 change instance field
//// yes, assign can be used as expression here
//Person haveBirthday = age <- age + 1
//
//
//// 8 loop
//1 to: 3 do: [ it echo ]
//// 9 if
//true => "true" echo
//
//// 10 switch
//
//// smart casted inside branches
//User getName = | this
//| Guest => "Guest" echo
//| LoggedIn => this name echo
//
//// 11 list
//list = {1 2 3}
//list add: 4
//// 1a 2a 3a 4a
//mappedList = list map: [it toString + "a"]
//
//// map
//map = #{1 "a" 2 "b"}
//map at: 3 put: "c"
//// "a"
//a = map at: 1
//a != null => a echo
