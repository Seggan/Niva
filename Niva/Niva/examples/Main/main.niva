//String code -> Int = 5
//x = {"q" "w" "f"}
//x map: [ it split: "" |> map: &String code ]
//

//type Box x: T
//
//Box::Box::T unzip = [
//    this echo
//]
//
//q = Box x: {1 2 3}
//q unzip
///////////////
//MutableList::MutableList::T unzip = [
//    first::MutableList::T = {}
//    second::MutableList::T = {}
//
//    this forEach: [
//        first add: (it at: 0)
//        second add: (it at: 1)
//    ]
//
//    ^ { first second }
//]
//
//{({1 2 3}) ({4 5 6}) ({7 8 9})} unzip echo
/////////////////////


//x::MutableList::MutableList::Int = { ({1}) ({2}) }
//x echo

//type Lazy v: T? init: [ -> T]
//constructor Lazy init::[ -> T] = Lazy v: null init: init
//
//Lazy eval = [
//  result = v unpackOrValue: init do
//  v <- result
//  ^ result
//]
//
//x = Lazy init: [
//  "computing!!!" echo
//  1 + 1
//]
//
//x eval echo
//x eval echo
//x eval echo

/////////////////////
//x = {1 2 3 4}
//y = x firstOrNull: [it == 3]
//z = y unpackOrValue: -1
first::MutableList::T = {}
q = first toList
//List::List::T unzip -> List::List::T = [
//    first::MutableList::T = {}
//    second::MutableList::T = {}
//
//    this forEach: [
//        first add: (it at: 0)
//        second add: (it at: 1)
//    ]
//    q = first toList
//    w = second toList
////    ^ { (first toList), (second toList) } toList
//    ^ { q w } toList
//]

