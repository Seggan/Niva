//type Assert
//constructor Assert that::Any equals::Any -> Unit = [
//  that != equals => [
//    Error throwWithMessage: "Assertion failed: $that != $equals"
//  ]
//]
//Assert that: "sas" equals: "sas"

//fun <T> Node<T>.addAll(): Int {
//    val v = this.value
//    val l = left
//    val r = right
//    when (v) {
//        is Int -> {
//            val leftSum = left.unpackOr({it.addAll()}, 0)
//            val rightSum = if (r != null) r.addAll() else 0
//            return v + leftSum + rightSum
//        }
//        else -> return 0
//    }
//
//}

//type Person name: String
//Person func::Person.[Int, String -> Int] = 1 //func this: this x: 1 y: "Sas"
////Person func::Person.[Int, String -> Int] =  this func x: 1 y: "Sas"
////Person func::Person.[Int, String -> Int] =  this Int: 1 String: "Sas"
////Person func::Person.[x::Int, y::String -> Int] = this x: 1 y: "Sas"
//
//func = [this::Person, x::Int, y::String -> x inc inc inc]
//func = Person[x::Int, y::String -> x inc inc inc]
//
//x = Person name: "Alice"
//x func: func



//type Node v: Int next: Node?
//constructor Node v::Int = Node v: v next: null
//Node str -> String =
//  next unpack: [ "$v, " + it str] or: "$v"
//
//
//type LinkedList head: Node? tail: Node? size: Int
//constructor LinkedList empty =
//    LinkedList head: null tail: null size: 0
//
//LinkedList isEmpty = size == 0
//LinkedList str = this isEmpty => "Empty!" |=> head unpackOrError str
//LinkedList push: v::Int -> LinkedList = [
//    head <- Node v: v next: head
//    tail == null => tail <- head
//    size <- size inc
//    ^this
//]
//LinkedList add: v::Int -> LinkedList =
//  this isEmpty => [
//    this push: v
//    this
//  ] |=> [
//    tail unpack: [
//      it next: (Node v: v)
//      tail <- it next
//    ]
//    this
//  ]
//LinkedList at: i::Int -> Node? = [
//  mut curr = head
//  mut currI = 0
//
//  [currI < i] whileTrue: [
//    curr unpack: [
//        curr <- it next
//        currI <- currI inc
//    ]
//  ]
//  ^curr
//]
//
//
//
//list = LinkedList empty
//list push: 1 |> push: 2 |> push: 3
//list add: -1 |> add: -2 |> add: -3
//"!!!" echo
//list at: 4 |> unpackOrError str echo
//list str echo

Int sas::Int -> Int? = 45
1 sas: 5 |> unpackOrError inc


//Int sas -> Int? = 1 > 2 => null |=> 5
//
//{(6 sas)} at: 0 |> unpackOrError inc echo
